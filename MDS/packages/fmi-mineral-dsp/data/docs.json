{
  "dsp_spec_version": "0.0.1",
  "last_updated_by": "",
  "last_updated": "2022-01-19T21:39:25.000Z",
  "entities": [
    {
      "id": "cee81ddd-2150-4a95-9f06-33622a8fec99",
      "class": "doc",
      "type": "page",
      "name": "New Component Process Overview",
      "description": "There are many processes involved in creating a new component to be a part of the Mineral Design System. This document provides an overview of the steps necessary to plan, build, document, and deploy a new component. The below steps are not meant to be comprehensive and are likely to be generic enough that sub-processes will need to be established in order to fully standardize the process and ensure nothing falls through the cracks.\n\n# Plan & Prioritize\nPlanning is essential. It ensures that the work that will be done is valuable and necessary. It is unfortunate to build something that does not fit the need or does not work as intended. Follow the steps to ensure the Mineral Design System stays purpose-driven and useful.\n\n## Planning Steps\n1. Understand component requirements/write a User Story:\n\t1) Document use of the component in at leaste one real scenario example (avoid designing components in a vacuum without context).\n    \n    \t\"As a [*persona/user type*] [*performing a task*], I need to [*perform a function with the control*], so that I can [*achieve my goal of completing a task*]\" (ex. Yes/No/NA toggle button group: *As an on-site worker tasked with inspecting a light vehicle, I need to select the condition of an inspection point in the Light Vehicle Inspection form so that I can complete this required form.*)\n    1) Document necessary settings or properties of the component. These should correspond with the properties of the variants in the design file to achieve a singular design language between designer and developer.\n    1) Document expected behavior of the component in each state or variation (normal, disabled, selected, active, error, success, etc). Describe how the state changes or setting options affect the control both visually and logically. \n    1) Describe any interactions and how the component responds (animations, state changes, logic actions)\n1. Coordinate between Design/Development of the component.\n\t1. Design Token Plans\n\n# Build/Create\nOnce the planning stage is complete and the team fully understands why and how the component should be created, then the process to actually build the component can begin.\n\n## Build/Creation Steps\n1. Component Code Developed for each platform\n\t1) Unit Tests Cover Expected and Unexpected User-Provided Input.\n    1) Unit Tests Cover Expected and Unexpected System- and API-provided data.\n    1) Major use cases are given as examples with code on the Kitchen Sink for each supported platform.\n1. Component Design\n\t1) The component is built in Figma and incorporates all the supported themes.\n1. Design Tokens Implemented\n\n# Document\nNow that the component is built, there needs to be communication around how to implement it, why to use it, and guidance on how it should be used in design. This step is vital to keeping the branding, experience, design, and development consistent across numerous products across the organization.\n\n## Documentation Steps\n1. Development Documentation Written\n\t1) API Documentation is provided for all possible properties/settings and values\n    1) Examples of code in each supported platform.\n    \n1. Design Token Documentation\n\t1) Design Tokens used are listed on the component documentation page of the Kitchen Sink. Each includes the token key, its value, its alias chain, and a description of where it is used in the component. This must align with the design side's application, naming, and value of each Design Token. (Writing this should be a shared effort with design and development)\n    1) The Design Token Documentation has been reviewed on the Kitchen Sink by an editor, designer, and developer to ensure accuracy.\n    \n1. Design Documentation Written\n\t1) Design & Usage Guide for the component\n    1) Visual examples of each major variant (if not rendered natively)\n    1) Figma file tips/guidance for using this component in product designs.\n    \n1. Adobe XD Plugin for Intellisense for each platform\n\t1) Code snippet(s) added with proper naming conventions that is in alignment with design.\n    1) A preview image is added to the intellisense preview.\n    1) Necessary documentation is added to the intellisense preview, and the link to the full documentation page on the Kitchen Sink.\n\n\n# Release\nOnly once the Creation AND Documentation are complete is the component ready to release for use by product teams. A component released prior to these steps being fully complete will only cause problems that need to be fixed in retrospect, so it is imperative that the previous steps are complete before release happens.\n\n## Release Steps\n1. Design - Verify\n\t1) The Figma Library for mineral design has been updated to include the component to be used by product developers.\n    \n1. Development - Verify\n\t1) The necessary dependencies and component files are added to the DSP so that the component may be utilized in development.\n    \n1. Documentation - Verify\n\t1) Adobe XD Intellisense code snippets and documentation are updated and included in the DSP.\n    1) The Component page on the Kitchen Sink is fully updated and has gone through the editing review process.\n\n1. Package Release/Update\n\tTBD - When the Mineral DSP is available as a package for implementation by other projects, more detail will be added here.\n",
      "tags": [],
      "last_updated": "2022-03-10T15:38:19.588Z",
      "last_updated_by": ""
    },
    {
      "id": "7b51eade-7264-45af-ab41-9888307363de",
      "class": "doc",
      "type": "page",
      "name": "New Component Requirements",
      "description": "In order to maintain consistent implementation of the Mineral Design System, certain standards of documentation are set. Ensure that each of the Requirements below are met when adding a new component to the Mineral Design System so that different product teams can properly and consistently implement the components. For more information on the process of how to proceed to implement and document these standards, please see the \"How to add a New Design System Component\" (Currently Yet To Be Written) Process Article.\n\n# Requirements\nThe following requirements are meant to be treated as a sort of checklist to know when a component is considered complete and ready to be included as part of the Mineral Design System Package. It is possible that something listed here is not required for a certain component. If this is the case, do not simply skip it; a note should be made as to why it is unnecessary in the documentation.\n\n## Design Documentation\nA Designer on a product team may not have had the opportunity to help build the design system and will likely need some guidance on how to properly and effectively use the design files to create designs and prototypes for various products that adhere to the Mineral Design System style guidelines. In order to achieve parity of use of components within the Mineral Design System across multiple teams and products, each component requires a standard set of guidelines and UX principles to be documented for reference.\n\n### Design Documentation Checklist\n* Design Tokens used in the control documented (name, alias hierarchy, value)\n* Color Theme variations\n* ADA Compliance level (AA/AAA) for Light/Dark modes\n* Responsiveness guides/Form Factor guides\n* Usage Guidelines (provide similar alternatives like checkbox vs switch)\n* Usability Guide (provide guidelines for placement, spacing, and times when not to use)\n* Documentation for variants & settings use, including explanations and naming conventions that match those in development\n* Where to find and how to use the control from the Mineral Design System control library in Figma designs/prototypes\n* All documentation posted in the Kitchen Sink Site page for this component\n\n## Design Files\nFor all components with a visual UI, ensure there exists a component with all necessary and possible variants included in the Mineral Design System Figma file. Only once the component is ready for release (all other requirements are met), publish the new component to the Figma Library that contains all the offical Mineral Design System Components for use by product design teams.\n\n### Design File Checklist\n* Responsiveness Tested (Auto Layout, content minimum/maximums etc)\n* Design Tokens applied through the Figma Tokens Plugin for all possible/applicable properties.\n* All possible and necessary variants are represented\n* All Naming Conventions match those in Development\n* The Component is available in the Mineral Design System Figma component library.\n\n## Design Tokens\nDesign Tokens are a tool- and platform-agnostic way to store design decisions as key-value pairs. They can be colors, corner radii, spacing/sizes, URLs to images, typography attributes, and many other things. This agnostic format is converted into tool- or platform-specific versions for use by designers and developers.\n\n### Design Tokens Checklist\n* Any component-specific Design Tokens are aliases of semantic tokens.\n* All Design Tokens referenced by the component are documented by use/application, name, and referenced value in the Design Documentation of the component.\n* Design Token use has been reviewed by another designer and developer against current Design Token use guidelines and has passed their scrutiny.\n* Design Token export/build/conversion produces usable values for all supported platforms. (this may include writing custom transforms for Style Dictionary or creating specific classes to parse a data structure into an object in a platform's language).\n* Referenced Design Tokens are listed in the component documentation of the Kitchen Sink.\n\n## Code Snippets\nCode snippets are generic pre-written code blocks that represent a starting point of implementing a given component in a specific platform/framework with placeholder values meant to be replaced (such as a *Primary Button* snippet for Flutter).\nA Code snippet will usually reference external reusable components in the framework. This could include custom Flutter widgets that, in turn, may reference additional custom classes and data structures to function properly, so the snippet alone may not be enough to fully implement a component; additional files may need to be included.\nThe Mineral Design System DSP stores and makes available code snippets with the help of the Visual Studio Code and the Adobe XD plugin for Visual Studio Code. In order add and use these snippets, the use of Visual Studio Code and the Adobe XD Plugin for Visual Studio Code are both required. For more info on getting this set up, see the README.md file in the root of the Mineral Design System DSP.\n\n### Code Snippets Checklist - Flutter\n* Code Snippet Added in the Adobe XD plugin\n* Preview Image added to the Adobe XD plugin\n* Basic implementation documentation is added to the Adobe XD plugin. This includes required fields/settings from the API and a basic written description of UX usage guidelines for the component.\n* Code snippets reference Design Token values--NO hard-coded values if possible, and Design Token aliases reference Base Design Token values and are not \"one-offs\" unless it is absolutely necessary to break these guidelines (in which case it should spawn a review of current Base Design Tokens and whether the existing ones are sufficient for most cases).\n* Any necessary import statements and additional models or classes required for the component to function properly are documented in the Adobe XD Plugin as well as the Kitchen Sink.\n* Link to the full documentation page on the Mineral Kitchen Sink in the documentation section (this site is currently still under development).\n\n## Developer Documentation\nFor a developer, code snippets are a great way to improve efficiency and productivity, as well as ensure implementation consistency. However, the snippet itself can only do so much. A component will likely have settings or attributes, bound data, as well as logic which requires additional explanation. This explanation is provided in the form of documentation to guide and inform a developer of all the capabilites of a component, as well as how to utilize these capabilites.\n\n### Developer Documentation Checklist\n* API Documentation for each option/setting including the use/application, name, and possible values. \n* For values in the API documentation, in the case of named values/enumeration/boolean for API, each possible value should have a description for how it affects the component. \n* For values in the API documentation, in the case of Numerical values, they should have upper/lower limits, and how the values are interpreted by and affect the component.\n* Implementation Code Examples of the major variations of the component.\n\n## Testing Requirements\nIn addition to all the above requirements to document and make available the necessary code and design resources, it is important that each component is thoroughly tested prior to \n\n### Testing Requirements Checklist\n* The component has been thoroughly tested on the high use devices (TBD, may vary by control if the control targets only certain platforms or frameworks)\n* The component passes required ADA compliance.\n* The component passes supported color Theme UX guidelines or provides detail why it diverges from UX guidelines.\n* The Sandbox project for each of the supported frameworks exhibits a fully functional and interactive implementation of the control for each major use case. Additional minor cases have been fully tested but do not necessarily have an example in the Sandbox project.\n* Unit tests coverage above 70% and all passed. ",
      "tags": [],
      "last_updated": "2022-03-09T22:25:28.336Z",
      "last_updated_by": ""
    }
  ]
}